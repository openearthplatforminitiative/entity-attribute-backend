"""Initial model

Revision ID: cf4ae96be50d
Revises:
Create Date: 2025-05-08 10:45:20.168676

"""

from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cf4ae96be50d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "attribute_definition",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "STRING",
                "INTEGER",
                "FLOAT",
                "BOOLEAN",
                "DATE",
                "ENUM",
                "GEOMETRY",
                name="attribute_type_def",
            ),
            nullable=False,
        ),
        sa.Column("include_in_summary", sa.BOOLEAN(), nullable=False),
        sa.Column("allowed_values", postgresql.ARRAY(sa.String()), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_attribute_definition")),
    )
    op.create_table(
        "entity",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("entity_type", sa.String(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_entity")),
    )
    op.create_table(
        "entity_definition",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("hash", sa.String(), nullable=False),
        sa.Column("collection_name", sa.String(), nullable=False),
        sa.Column(
            "api_endpoints",
            sa.ARRAY(
                sa.Enum(
                    "LIST", "GET", "POST", "PUT", "DELETE", name="endpoint_type_def"
                )
            ),
            nullable=False,
        ),
        sa.Column("return_summary_on_collection", sa.BOOLEAN(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_entity_definition")),
    )
    op.create_table(
        "attribute",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "STRING",
                "INTEGER",
                "FLOAT",
                "BOOLEAN",
                "DATE",
                "ENUM",
                "GEOMETRY",
                name="attribute_type",
            ),
            nullable=False,
        ),
        sa.Column("value_str", sa.String(), nullable=True),
        sa.Column("value_int", sa.Integer(), nullable=True),
        sa.Column("value_float", sa.Float(), nullable=True),
        sa.Column("value_boolean", sa.Boolean(), nullable=True),
        sa.Column("value_date", sa.Date(), nullable=True),
        sa.Column("value_enum", sa.String(), nullable=True),
        sa.Column(
            "value_geom",
            geoalchemy2.types.Geometry(
                srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.Column("entity_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_attribute_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_attribute")),
    )

    op.create_table(
        "entity_optional_attributes",
        sa.Column("entity_definition_id", sa.UUID(), nullable=False),
        sa.Column("attribute_definition_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["attribute_definition_id"],
            ["attribute_definition.id"],
            name=op.f(
                "fk_entity_optional_attributes_attribute_definition_id_attribute_definition"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["entity_definition_id"],
            ["entity_definition.id"],
            name=op.f(
                "fk_entity_optional_attributes_entity_definition_id_entity_definition"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "entity_definition_id",
            "attribute_definition_id",
            name=op.f("pk_entity_optional_attributes"),
        ),
    )
    op.create_table(
        "entity_relation",
        sa.Column("source_entity_id", sa.UUID(), nullable=False),
        sa.Column("target_entity_id", sa.UUID(), nullable=False),
        sa.Column("collection_name", sa.String(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_entity_id"],
            ["entity.id"],
            name=op.f("fk_entity_relation_source_entity_id_entity"),
        ),
        sa.ForeignKeyConstraint(
            ["target_entity_id"],
            ["entity.id"],
            name=op.f("fk_entity_relation_target_entity_id_entity"),
        ),
        sa.PrimaryKeyConstraint(
            "source_entity_id", "target_entity_id", name=op.f("pk_entity_relation")
        ),
    )
    op.create_table(
        "entity_relation_definition",
        sa.Column("source_entity_id", sa.UUID(), nullable=False),
        sa.Column("target_entity_id", sa.UUID(), nullable=False),
        sa.Column("collection_name", sa.String(), nullable=False),
        sa.Column("api_endpoints", sa.ARRAY(sa.String()), nullable=True),
        sa.ForeignKeyConstraint(
            ["source_entity_id"],
            ["entity_definition.id"],
            name=op.f(
                "fk_entity_relation_definition_source_entity_id_entity_definition"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["target_entity_id"],
            ["entity_definition.id"],
            name=op.f(
                "fk_entity_relation_definition_target_entity_id_entity_definition"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "source_entity_id",
            "target_entity_id",
            "collection_name",
            name=op.f("pk_entity_relation_definition"),
        ),
    )
    op.create_table(
        "entity_required_attributes",
        sa.Column("entity_definition_id", sa.UUID(), nullable=False),
        sa.Column("attribute_definition_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["attribute_definition_id"],
            ["attribute_definition.id"],
            name=op.f(
                "fk_entity_required_attributes_attribute_definition_id_attribute_definition"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["entity_definition_id"],
            ["entity_definition.id"],
            name=op.f(
                "fk_entity_required_attributes_entity_definition_id_entity_definition"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "entity_definition_id",
            "attribute_definition_id",
            name=op.f("pk_entity_required_attributes"),
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("entity_required_attributes")
    op.drop_table("entity_relation_definition")
    op.drop_table("entity_relation")
    op.drop_table("entity_optional_attributes")

    op.drop_table("attribute")
    op.drop_table("entity_definition")
    op.drop_table("entity")
    op.drop_table("attribute_definition")
    # ### end Alembic commands ###
